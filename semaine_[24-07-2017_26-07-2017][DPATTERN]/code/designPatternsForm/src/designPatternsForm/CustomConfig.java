package designPatternsForm;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/*
 * il ne doit y en avoir qu'une (instance)
 * 
 */
public class CustomConfig {
	
	/*
	 * 1) limiter l'acces au constructeur
	 * 2) stocker/memoriser dans un attribut static
	 * 	  l'instance unique de l'objet a renvoyer
	 */
	
	// mon unique instance
	private static CustomConfig theInstance = null;

	
	// mon etat
	private LocalDateTime dateCreated;
	
	private Map<String, String> configvalues;
	
	
	// constructeur (priv√©, non appelable de l'exterieur)
	private CustomConfig() {
		this.dateCreated = LocalDateTime.now();
		this.configvalues = new HashMap<>();
	}
	
	public void addValueToConfig(String cle, String valeur) {
		this.configvalues.put(cle, valeur);
	}
	public String getValueFromConfig(String cle) {
		return this.configvalues.get(cle);
	}
	
	public void saveToPropertiesFile(String filename) {
		Properties prop = new Properties();
		OutputStream output = null;
		
		try {
			output = new FileOutputStream(filename);
			this.configvalues
				.keySet()
				.stream()
				.forEach(
				cle -> prop.setProperty(cle, this.configvalues.get(cle)));
			prop.store(output, "generated by customConfig");
			output.close();
			
		} catch (FileNotFoundException e) {e.printStackTrace();} 
		catch (IOException e) {	e.printStackTrace();}
	}
	public void loadFromPropertiesFile(String filename) {
		this.configvalues.clear();
		Properties prop = new Properties();
		InputStream input = null;
		
		try {
			input = new FileInputStream(filename);
			prop.load(input);
			prop.keySet()
				.stream()
				.map(cle -> cle.toString())
				.forEach(
					cle -> this.configvalues.put(cle,prop.getProperty(cle)));
			input.close();
		} catch (FileNotFoundException e) {e.printStackTrace();}
		catch (IOException e) {e.printStackTrace();}
	}
	
	
	// si l'instance n'existe quand on la demande la creer
	// et la memoriser
	// par la suite, on renverra toujours cette meme instance
	public static CustomConfig getInstance() {
		if (theInstance == null) {
			theInstance = new CustomConfig();
		}
		return theInstance;
	}

	@Override
	public String toString() {
		return "CustomConfig [dateCreated=" + dateCreated + "]";
	}
	
}
